head
  meta(name='viewport' content='width=device-width, initial-scale=1.0')
  title Wheel of Fortune
  link(rel='stylesheet' href='/donation/text/main.css' type='text/css')
  script(type='text/javascript' src='/donation/text/Winwheel.js')
  script(src='http://cdnjs.cloudflare.com/ajax/libs/gsap/latest/TweenMax.min.js')
script(src='http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js')
script(src='/socket.io/socket.io.js')
div(align='center')
  table(cellpadding='0' cellspacing='0' border='0')
    tr
      td
        .power_controls(style='display: none')
          img#spin_button(src='/donation/text/spin_off.png' alt='Spin' onclick='powerSelected(2), startSpin(), myFunction();')
          br
          br
          a(href='#' onclick='resetWheel(); return false;')
            | Play
            | Again
          br
          | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(reset)
      td.the_wheel(width='438' height='582' align='center' valign='center')
        #audio-container(style='display: none;')
        #wheel(style='display: none')
          canvas#canvas(width='434' height='434')
            p(style='{color: white}' align='center')  &Kcy;&acy;&zhcy;&iecy;&tcy;&scy;&yacy; &vcy;&acy;&shcy; &bcy;&rcy;&acy;&ucy;&zcy;&iecy;&rcy; &ncy;&iecy; &pcy;&ocy;&dcy;&dcy;&iecy;&rcy;&zhcy;&icy;&vcy;&acy;&tcy;&iecy; canvas
  script.
    function showDonation() {
    var x = document.getElementById("wheel");
    x.style.display = "block";
    }
    // Create new wheel object specifying the parameters at creation time.
    let theWheel = new Winwheel({
    'outerRadius': 212,        // Set outer radius so wheel fits inside the background.
    'innerRadius': 75,         // Make wheel hollow so segments don't go all way to center.
    'textFontSize': 24,         // Set default font size for the segments.
    'textOrientation': 'vertical', // Make text vertial so goes down from the outside of wheel.
    'textAlignment': 'outer',    // Align text to outside of wheel.
    'numSegments': 10,         // Specify number of segments.
    'segments':             // Define segments including colour and text.
    [                               // font size and test colour overridden on backrupt segments.
    { 'fillStyle': '#ee1c24', 'text': '30', 'message': 'алло' },
    { 'fillStyle': '#3cb878', 'text': '45', 'message': 'алло' },
    { 'fillStyle': '#f6989d', 'text': '60', 'message': 'алло' },
    { 'fillStyle': '#00aef0', 'text': '75', 'message': 'алло' },
    { 'fillStyle': '#f26522', 'text': '50', 'message': 'алло' },
    { 'fillStyle': '#000000', 'text': 'БАНКРОТ', 'textFontSize': 16, 'textFillStyle': '#ffffff' },
    { 'fillStyle': '#e70697', 'text': '30', 'message': 'алло' },
    { 'fillStyle': '#fff200', 'text': '60', 'message': 'алло' },
    { 'fillStyle': '#f6989d', 'text': '70', 'message': 'алло' },
    { 'fillStyle': '#ee1c24', 'text': '35', 'message': 'алло' },
    //- { 'fillStyle': '#3cb878', 'text': '50', 'message': 'алло' },
    //- { 'fillStyle': '#f26522', 'text': '80', 'message': 'алло' },
    //- { 'fillStyle': '#a186be', 'text': '30', 'message': 'алло' },
    //- { 'fillStyle': '#fff200', 'text': '40', 'message': 'алло' },
    //- { 'fillStyle': '#00aef0', 'text': '65', 'message': 'алло' },
    //- { 'fillStyle': '#ee1c24', 'text': '100', 'message': 'алло' },
    //- { 'fillStyle': '#f6989d', 'text': '50', 'message': 'алло' },
    //- { 'fillStyle': '#f26522', 'text': '40', 'message': 'алло' },
    //- { 'fillStyle': '#3cb878', 'text': '90', 'message': 'алло' },
    //- { 'fillStyle': '#000000', 'text': 'БАНКРОТ', 'textFontSize': 16, 'textFillStyle': '#ffffff' },
    //- { 'fillStyle': '#a186be', 'text': '60', 'message': 'алло' },
    //- { 'fillStyle': '#fff200', 'text': '70', 'message': 'алло' },
    //- { 'fillStyle': '#00aef0', 'text': '80', 'message': 'алло' },
    //- { 'fillStyle': '#ffffff', 'text': 'НЕ ФОРТАНУЛО', 'textFontSize': 12 }
    ],
    'animation':           // Specify the animation to use.
    {
    'type': 'spinToStop',
    'duration': 10,    // Duration in seconds.
    'spins': 3,     // Default number of complete spins.
    'callbackFinished': alertPrize,
    'callbackSound': playSound,   // Function to call when the tick sound is to be triggered.
    'soundTrigger': 'pin'        // Specify pins are to trigger the sound, the other option is 'segment'.
    },
    'pins':       // Turn pins on.
    {
    'number': 24,
    'fillStyle': 'silver',
    'outerRadius': 4,
    }
    });
    // Loads the tick audio sound in to an audio object.
    let audio = new Audio('/donation/text/music.mp3');
    // This function is called when the sound is to be played.


    function playSound() {
    // Stop and rewind the sound if it already happens to be playing.
    audio.pause();
    audio.currentTime = 0;
    //- не видит музыку в сурсах
    audio.play();
    }
    // Vars used by the code in this page to do power controls.
    let wheelPower = 0;
    let wheelSpinning = false;
    // -------------------------------------------------------
    // Click handler for spin button.
    // -------------------------------------------------------
    function startSpin() {
    var wheelPower = 2;
    // Ensure that spinning can't be clicked again while already running.
    if (wheelSpinning == false) {
    // Based on the power level selected adjust the number of spins for the wheel, the more times is has
    // to rotate with the duration of the animation the quicker the wheel spins.
    if (wheelPower == 1) {
    theWheel.animation.spins = 3;
    } else if (wheelPower == 2) {
    theWheel.animation.spins = 6;
    } else if (wheelPower == 3) {
    theWheel.animation.spins = 10;
    }
    // Disable the spin button so can't click again while wheel is spinning.
    document.getElementById('spin_button').src = "/donation/text/spin_off.png";
    document.getElementById('spin_button').className = "";
    // Begin the spin animation by calling startAnimation on the wheel object.
    theWheel.startAnimation();
    // Set to true so that power can't be changed and spin button re-enabled during
    // the current animation. The user will have to reset before spinning again.
    wheelSpinning = true;
    }
    }
    // -------------------------------------------------------
    // Function for reset button.
    // -------------------------------------------------------
    function resetWheel() {
    theWheel.stopAnimation(false);  // Stop the animation, false as param so does not call callback function.
    theWheel.rotationAngle = 0;     // Re-set the wheel angle to 0 degrees.
    theWheel.draw();                // Call draw to render changes to the wheel.
    document.getElementById('pw1').className = "";  // Remove all colours from the power level indicators.
    document.getElementById('pw2').className = "";
    document.getElementById('pw3').className = "";
    wheelSpinning = false;          // Reset to false to power buttons and spin can be clicked again.
    }
    // -------------------------------------------------------
    // Called when the spin animation has finished by the callback feature of the wheel because I specified callback in the parameters.
    // -------------------------------------------------------
    function alertPrize(indicatedSegment) {
    //- Озвучка текста
    // Just alert to the user what happened.
    // In a real project probably want to do something more interesting than this with the result.
    if (indicatedSegment.text == 'LOOSE TURN') {
    console.log('Sorry but you loose a turn.');
    } else if (indicatedSegment.text == 'BANKRUPT') {
    console.log('Oh no, you have gone BANKRUPT!');
    } else {
    // indicatedSegment.message это текст который пока надо озвучить
    console.log("You have won " + indicatedSegment.message);
    }

    var txt = {
        text: indicatedSegment.message
    }

    $.ajax({
        type: 'POST',
        url:'/donation/ttsc',
        data: txt,
        success:function(data){
          console.log(data);
          appendAudio();
          console.log("audio appended");
          var audio = document.getElementById("audio");
          audio.play();
          audio.onended = () => {
            removeAudio();
          };
        },
        error:function(error){
          console.log("Error: Audio wasn't created");
        }
      });

    }


    function hideDonation() {
    wheelSpinning = false;
    var x = document.getElementById("wheel");
    x.style.display = "none";
    theWheel.stopAnimation(false);  // Stop the animation, false as param so does not call callback function.
    theWheel.rotationAngle = 0;     // Re-set the wheel angle to 0 degrees.
    theWheel.draw();                // Call draw to render changes to the wheel.
    }

    function appendAudio(){
      $('#audio-container').append(
        '<audio controls preload="none" id="audio" style="display: none;">'+
            '<source src="https://xdonat.com/donation/tts" type="audio/ogg"/>'+
            '<source src="https://xdonat.com/donation/tts" type="audio/mpeg"/>'+
          '</audio>');
    }

    function removeAudio(){
        $('#audio').remove();
    }

    var socket = io();
    if(socket !== null)
    {
    // название рума будет нашим user_id
    var room = "#{user_token}";
    // connection
    socket.on('connect', function () {
    // сюда заходит
    socket.emit('room', room);
    console.log('connected to ' + room);
    });
    // message
    socket.on('message', function () {
     console.log()
     showDonation()
     startSpin()
     setTimeout(function () {
         hideDonation()
     }, 12000);
     });
    }
